// This file is "model.dart"
import 'package:dart_mappable/dart_mappable.dart';
import 'package:flutter/material.dart';
import 'package:samba_public_app/features/schools/school_color_hook.dart';
import 'package:samba_public_app/main_providers.dart';

// Will be generated by dart_mappable
part 'school.mapper.dart';

// TODO(hectorAguero): Add all the league names across the years
@MappableEnum(caseStyle: CaseStyle.upperCase)
enum SchoolLeague { liesa, ligarj, superliga, acas }

@MappableEnum()
enum SchoolDivision {
  @MappableValue(1)
  especial,
  @MappableValue(2)
  ouro,
  @MappableValue(3)
  prata,
  @MappableValue(4)
  bronze,
  @MappableValue(5)
  avaliacao,
  @MappableValue(6)
  mirins
}

typedef SchoolId = int;

@MappableClass(includeSubClasses: [])
class School with SchoolMappable {
  const School({
    required this.id,
    required this.name,
    required this.imageUrl,
    required this.foundationDate,
    required this.godmotherSchool,
    required this.colorNames,
    required this.colors,
    required this.symbols,
    required this.league,
    required this.currentDivision,
    required this.divisionNumber,
    this.isFavorite = false,
  });

  final SchoolId id;
  final String name;
  @MappableField(hook: ImageUrlHook())
  final String imageUrl;
  @MappableField(hook: DateTimeHook())
  final DateTime foundationDate;
  final String godmotherSchool;
  @MappableField(key: 'colors')
  final List<String> colorNames;
  @MappableField(hook: ColorHook())
  final List<Color> colors;
  final List<String> symbols;
  final SchoolLeague league;
  @MappableField(key: 'divisionNumber')
  final SchoolDivision currentDivision;
  final int divisionNumber;
  final bool isFavorite;

  static const fromMap = SchoolMapper.fromMap;
  static const fromJson = SchoolMapper.fromJson;
}

class DateTimeHook extends MappingHook {
  const DateTimeHook();

  @override
  Object? beforeDecode(Object? value) {
    if (value is String) {
      //1946/6/24",
      final data = value.split('/');
      return DateTime(
        int.parse(data.first),
        int.parse(data[1]),
        int.parse(data.last),
      );
    }
    throw Exception('Date is not valid');
  }
}

// TODO(hectorAguero): Remove Hook and pass logic to the API
class ImageUrlHook extends MappingHook {
  const ImageUrlHook();

  @override
  Object? beforeDecode(Object? value) {
    if (value is String) {
      return '$baseUrl$value';
    }
    throw Exception();
  }
}
